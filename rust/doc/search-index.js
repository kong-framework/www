var searchIndex = JSON.parse('{\
"kdata":{"doc":"üìÑ kdata","t":[0,0,0,3,3,11,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,12,12,12,11,11,12,12,12,11,11,12,11,11,11,11,11,11,12,12,12,3,3,8,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,12,12,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["accounts","inputs","validate","Account","PublicAccount","borrow","borrow","borrow_mut","borrow_mut","bussiness_name","created","current_school_name","date_of_birth","description","deserialize","deserialize","email","from","from","from","from","fullname","gender","id_number","into","into","last_login","mobile_number","password","serialize","serialize","student_number","try_from","try_from","try_into","try_into","type_id","type_id","username","username","website","AccountAuthInput","AccountCreationInput","UserInput","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","email","from","from","into","into","is_valid","is_valid","is_valid","password","password","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","username","username","Email","Generic","Password","Username","Validate","ValidationError","borrow","borrow","borrow_mut","borrow_mut","email","fmt","fmt","from","from","into","into","password","provide","to_string","try_from","try_from","try_into","try_into","type_id","type_id","username"],"q":["kdata","","","kdata::accounts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kdata::inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kdata::validate","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","üïπÔ∏è inputs","validate","A generic account","Account Public Data","","","","","Name of the account‚Äôs bussiness","Date when account was created","User‚Äôs current school name","The date when the account holder was born.","Short bio of Account","","","User‚Äôs email address","","Returns the argument unchanged.","Returns the argument unchanged.","","The fullname of the account holder.","The gender of the account holder","ID number of the account owner","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Date account last logged in","Account owner‚Äôs mobile number","Account‚Äôs master key","","","User‚Äôs student number","","","","","","","Account‚Äôs unique username","The username of the user, also used as an unique identifier","Account owner‚Äôs web-address","Account authentication input","Data used as input to create a new account.","User input","","","","","","","","","","","Account email address","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Account master key","Account master key","","","","","","","","","Account‚Äôs username","Account‚Äôs username","","","","","","","","","","","TODO: better email validation","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","TODO: better password validation","","","","","","","","","Validate username (using Twitter style usernames)"],"i":[0,0,0,0,0,1,3,1,3,1,1,1,1,1,1,3,1,1,1,3,3,1,1,1,1,3,1,1,1,1,3,1,1,3,1,3,1,3,1,3,1,0,0,0,4,6,4,6,4,6,4,6,4,6,4,4,6,4,6,14,4,6,4,6,4,6,4,6,4,6,4,6,4,6,7,7,7,7,0,0,15,7,15,7,15,7,7,15,7,15,7,15,7,7,15,7,15,7,15,7,15],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[3]]]],0,[4,1],[[]],[[]],[1,3],0,0,0,[[]],[[]],0,0,0,[1,2],[3,2],0,[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[4,4],[6,6],[[]],[[]],[[],[[2,[4]]]],[[],[[2,[6]]]],0,[[]],[[]],[[]],[[]],[[],[[2,[7]]]],[4,[[2,[7]]]],[6,[[2,[7]]]],0,0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[8,9],[[7,10],11],[[7,10],11],[[]],[[]],[[]],[[]],[8,9],[12],[[],13],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[8,9]],"p":[[3,"Account"],[4,"Result"],[3,"PublicAccount"],[3,"AccountCreationInput"],[3,"TypeId"],[3,"AccountAuthInput"],[4,"ValidationError"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[8,"UserInput"],[3,"Validate"]]},\
"kerror":{"doc":"","t":[13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11],"n":["Config","DbConnection","DbField","DbSQL","DbTableCreation","DbTransaction","KError","PasswordHashing","PasswordVerifyHash","UrlParsing","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id"],"q":["kerror","","","","","","","","","","","","","","","","","","","",""],"d":["Configuration error","Database connection error","Database field refferencing error","Database sql statement error","Database table creation error","Database transaction error","","Password hashing error","Password hash verification","URL parsing error","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,2],3],[[1,2],3],[[]],[[]],[4],[[],5],[[],6],[[],6],[[],7]],"p":[[4,"KError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"kogs":{"doc":"","t":[3,3,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11],"n":["Property","PropertyInput","added","address","address","agentid","agentid","bathrooms","bathrooms","bedrooms","bedrooms","bookmarks","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","description","description","deserialize","deserialize","from","from","into","into","likes","name","name","online_views","photos","physical_views","price","price","serialize","serialize","sqft","sqft","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["kogs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data type to represent a physical property such as a house.","Input provided by the user, to create a new property.","Date when the property was added","Address of property","Address of property","ID of Agent representing the property","ID of Agent representing the property","Number of bathrooms","Number of bathrooms","Number of bedrooms","Number of bedrooms","Number of bookmarks for the property","","","","","","","","","Description of the property","Description of the property","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of likes for the property","Name of the property","Name of the property","Number of online views the property got","Contains a JSON string with paths to the actual images","Number of physical irl views the property got","Price of the property","Price of the property","","","Area size","Area size","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,0,[[],[[3,[1]]]],[[],[[3,[2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1,3],[2,3],0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4]],"p":[[3,"Property"],[3,"PropertyInput"],[4,"Result"],[3,"TypeId"]]},\
"kollection":{"doc":"üóÑÔ∏è kollection","t":[3,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,17,17,17,17],"n":["Kollection","borrow","borrow_mut","connect","create_account","from","into","new","private_get_account_by_email","private_get_account_by_username","public_get_account_by_email","public_get_account_by_username","sql","try_from","try_into","type_id","CREATE_ACCOUNT","CREATE_ACCOUNTS_TABLE","GET_ACCOUNT_BY_EMAIL","GET_ACCOUNT_BY_USERNAME"],"q":["kollection","","","","","","","","","","","","","","","","kollection::sql","","",""],"d":["Database management system","","","Open SQLite connection, create tables","Create a new account","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new database controller","Get an account‚Äôs private data by its email","Get an account‚Äôs private data by its username","Get an account‚Äôs public data by its email","Get an account‚Äôs public data by its username","SQL statements and queries","","","","Insert a account in the accounts table","","Get account by email","Get account by username"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0],"f":[0,[[]],[[]],[1,[[3,[2]]]],[[1,4],[[3,[2]]]],[[]],[[]],[5,1],[[1,5],[[3,[[6,[4]],2]]]],[[1,5],[[3,[[6,[4]],2]]]],[[1,5],[[3,[[6,[7]],2]]]],[[1,5],[[3,[[6,[7]],2]]]],0,[[],3],[[],3],[[],8],0,0,0,0],"p":[[3,"Kollection"],[4,"KError"],[4,"Result"],[3,"Account"],[15,"str"],[4,"Option"],[3,"PublicAccount"],[3,"TypeId"]]},\
"konfig":{"doc":"server configuration","t":[3,12,12,12,11,11,11,11,12,11,12,11,11,12,12,11,11,11],"n":["Konfig","admin_accounts_database","admin_email","auth_cookie_name","borrow","borrow_mut","deserialize","from","host","into","port","read","read_port","secret_key","static_files_path","try_from","try_into","type_id"],"q":["konfig","","","","","","","","","","","","","","","","",""],"d":["Server configuration","Admin Accounts database path","Admin email address","Name of the authorization session cookie id","","","","Returns the argument unchanged.","Node host","Calls <code>U::from(self)</code>.","Port to access the server","Read server config file from path provided as an argument ‚Ä¶","","Kong secret key","Path to static files","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[[]],[[]],[[],[[2,[1]]]],[[]],0,[[]],0,[[],[[2,[1,3]]]],[[],4],0,0,[[],2],[[],2],[[],5]],"p":[[3,"Konfig"],[4,"Result"],[4,"KError"],[15,"u16"],[3,"TypeId"]]},\
"kong":{"doc":"","t":[13,13,13,13,13,13,4,3,3,3,13,13,13,12,12,12,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,2,0,0,11,11,0,12,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,0,12,0,11,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,10,11,11,17,3,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,2],"n":["Config","DbConnection","DbField","DbSQL","DbTableCreation","DbTransaction","KError","Kollection","Konfig","Kong","PasswordHashing","PasswordVerifyHash","UrlParsing","admin_accounts_database","admin_email","auth_cookie_name","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","config","connect","create_account","database","deserialize","fmt","fmt","from","from","from","from","host","into","into","into","into","kdata","kontrol","kroute","new","new","outsource","port","private_get_account_by_email","private_get_account_by_username","provide","public_get_account_by_email","public_get_account_by_username","read","read_port","router","secret_key","start","static_files_path","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Kontrol","KontrolError","Kontroller","accounts","address","auth","borrow","borrow","borrow_mut","borrow_mut","from","from","handle","handle_request","into","into","post","serialize","try_from","try_from","try_into","try_into","type_id","type_id","validate_user_input","vzip","vzip","ADDRESS","AccountsKontroller","borrow","borrow_mut","from","into","post","try_from","try_into","type_id","validate_user_input","vzip","ADDRESS","AuthKontroller","borrow","borrow_mut","from","into","post","try_from","try_into","type_id","validate_user_input","vzip","Kroute","borrow","borrow_mut","from","get_url_params","into","kroute","try_from","try_into","type_id","vzip","server"],"q":["kong","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kong::kontrol","","","","","","","","","","","","","","","","","","","","","","","","","","","kong::kontrol::accounts","","","","","","","","","","","","kong::kontrol::auth","","","","","","","","","","","","kong::kroute","","","","","","","","","","","kong::outsource"],"d":["Configuration error","Database connection error","Database field refferencing error","Database sql statement error","Database table creation error","Database transaction error","","Database management system","Server configuration","Kong object","Password hashing error","Password hash verification","URL parsing error","Admin Accounts database path","Admin email address","Name of the authorization session cookie id","","","","","","","","","Kong configuration","Open SQLite connection, create tables","Create a new account","Kong database","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Node host","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","kontrol","kroute","Create a new database controller","Create new kong instance","Re-exports of upstream crates","Port to access the server","Get an account‚Äôs private data by its email","Get an account‚Äôs private data by its username","","Get an account‚Äôs public data by its email","Get an account‚Äôs public data by its username","Read server config file from path provided as an argument ‚Ä¶","","Kong router","Kong secret key","Start up runtime","Path to static files","","","","","","","","","","","","","","","","","","Trait for an HTTP endpoint /  request handler","","Request Kontroller","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Check request HTTP methods and handle accordingly","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Handle request from a HTTP POST method","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Kong request routing","","","Returns the argument unchanged.","Kong url parameters extractor","Calls <code>U::from(self)</code>.","Kong request router","","","","","High-level idiomatic web framework."],"i":[2,2,2,2,2,2,0,0,0,0,2,2,2,5,5,5,2,5,1,11,2,5,1,11,11,1,1,11,5,2,2,2,5,1,11,5,2,5,1,11,0,0,0,1,11,0,5,1,1,2,1,1,5,5,11,5,11,5,2,2,5,1,11,2,5,1,11,2,5,1,11,2,5,1,11,0,0,0,0,9,0,9,20,9,20,9,20,9,25,9,20,25,20,9,20,9,20,9,20,25,9,20,0,0,26,26,26,26,26,26,26,26,26,26,0,0,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,[[3,[2]]]],[[1,4],[[3,[2]]]],0,[[],[[3,[5]]]],[[2,6],[[3,[7]]]],[[2,6],[[3,[7]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,0,[8,1],[[[10,[9]]],11],0,0,[[1,8],[[3,[[12,[4]],2]]]],[[1,8],[[3,[[12,[4]],2]]]],[13],[[1,8],[[3,[[12,[14]],2]]]],[[1,8],[[3,[[12,[14]],2]]]],[[],[[3,[5,2]]]],[[],15],0,0,[11,[[3,[2]]]],0,[[],16],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[11,18],19],[[]],[[]],[[11,18],19],[20,3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[21,22],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[11,18],19],[[],3],[[],3],[[],17],[21,22],[[]],0,0,[[]],[[]],[[]],[[]],[[11,18],19],[[],3],[[],3],[[],17],[21,22],[[]],0,[[]],[[]],[[]],[[23,8],[[3,[24,2]]]],[[]],[[11,18],19],[[],3],[[],3],[[],17],[[]],0],"p":[[3,"Kollection"],[4,"KError"],[4,"Result"],[3,"Account"],[3,"Konfig"],[3,"Formatter"],[3,"Error"],[15,"str"],[3,"Kontroller"],[3,"Vec"],[3,"Kong"],[4,"Option"],[3,"Demand"],[3,"PublicAccount"],[15,"u16"],[3,"String"],[3,"TypeId"],[3,"Request"],[3,"Response"],[3,"KontrolError"],[8,"UserInput"],[15,"bool"],[3,"Router"],[3,"Params"],[8,"Kontrol"],[3,"AccountsKontroller"],[3,"AuthKontroller"],[3,"Kroute"]]},\
"krypto":{"doc":"üîê krypto","t":[0,0,0,0,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,5,5],"n":["authentication","defaults","kpassport","password","Auth","AuthHeaders","BearerToken","Cookie","authenticate","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","detect_auth_type","from","from","into","into","issue_kpassport_bearer_token","issue_kpassport_cookie","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","HOSTNAME_LENGTH_LIMIT","TIMESTAMP_LENGTH","USERNAME_LENGTH_LIMIT","Content","Kpassport","as_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","content","eq","eq","export","fmt","fmt","from","from","from_str","host","into","into","new_unsigned","sign","signature","signature_from_bytes","timestamp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","username","validate","hash","verify"],"q":["krypto","","","","krypto::authentication","","","","","","","","","","","","","","","","","","","","","","","","","krypto::defaults","","","krypto::kpassport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","krypto::password",""],"d":["üîë Authentication","","ü™™ Kong Passport","üîè Password management","Kong authentication and authorization management","HTTP authentication methods","","","Authenticate","","","","","","","Detect if the type of authentication used (cookie based or ‚Ä¶","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Issue a kpassport using a Bearer token","Issue a kpassport using HTTP cookies","","","","","","","","The issuer of the <code>kpassport</code> can be a, the maximum length ‚Ä¶","The length of a timestamp created by chrono::Utc::now();","The length of a username A username cannot be longer than ‚Ä¶","The content of a <code>kpassport</code>","The <code>kpassport</code> authorization token","Convert content to a string of bytes that can be signed ‚Ä¶","","","","","","","","","Kpassport content","","","Export kpassport as url safe base64 String","","","Returns the argument unchanged.","Returns the argument unchanged.","Derive a <code>kpassport</code> from a base64 encoded string","Server or application that generated the kpassport","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generates a new <strong>unsigned</strong> <code>kpassport</code>","Sign the <strong>kpassport</strong>","The signature of the kpassport","","The time when the kpassport was generated","","","","","","","","","The user that is being that is handed the kpassport","Validate the <strong>kpassport</strong> (see if it was signed with the key)","Hash a cleartext password using the scrypt hash function","Check if a scrypt hash matches the password cleartext"],"i":[0,0,0,0,0,0,1,1,1,4,1,4,1,1,1,1,4,1,4,1,1,1,1,4,1,4,1,4,1,0,0,0,0,0,6,6,9,6,9,6,9,6,9,9,6,9,9,6,9,6,9,9,6,6,9,9,9,9,9,6,6,9,6,9,6,9,6,9,6,9,0,0],"f":[0,0,0,0,0,0,0,0,[[1,2],[[3,[0]]]],[[]],[[]],[[]],[[]],[1,1],[[]],[4,[[3,[1,0]]]],[[]],[[]],[[]],[[]],[[2,2,2],[[3,[0]]]],[[2,2,2,2],[[3,[0]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],5],[[],5],0,0,0,0,0,[6,[[3,[[8,[7]],0]]]],[[]],[[]],[[]],[[]],[6,6],[9,9],[[]],[[]],0,[[6,6],10],[[9,9],10],[9,[[3,[11,0]]]],[[6,12],13],[[9,12],13],[[]],[[]],[2,[[3,[9,0]]]],0,[[]],[[]],[[2,2],[[3,[9,0]]]],[[9,2],[[3,[0]]]],0,[[[8,[7]]],[[3,[14,0]]]],0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],5],[[],5],0,[[9,2],[[3,[0]]]],[2,[[3,[11,15]]]],[[2,2],[[3,[10,15]]]]],"p":[[4,"Auth"],[15,"str"],[4,"Result"],[3,"AuthHeaders"],[3,"TypeId"],[3,"Content"],[15,"u8"],[3,"Vec"],[3,"Kpassport"],[15,"bool"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"Hash"],[4,"KError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
