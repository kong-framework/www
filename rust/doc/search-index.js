var searchIndex = JSON.parse('{\
"kong":{"doc":"","t":"NNNNDNNNDEEDDINENNNNNNNNKMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLMLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMALLLLLLLLLLLLLLLLLLLLLLLOFKMFCLAMKLLLLMLLLLLLLMLLCLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLMRRIKDLLLLLLLLLNNNNDELLLLLLLLLLLLLLLLLLLLLLL","n":["Array","Bool","Config","Delete","ErrorResponse","Get","Head","InvalidHttpMethod","JsonError","JsonValue","KError","Konfig","Kong","Kontrol","LogFile","Method","Null","Number","Object","Options","Post","Put","String","UrlParsing","address","admin_email","as_array","as_array_mut","as_bool","as_f64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","auth_cookie_name","bad_request","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","classify","clone","clone","clone_into","clone_into","column","config","conflict","console_log","custom","custom","default","default","defaults","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","error_message","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forbidden","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","get","get_input","get_input","get_mut","host","index","index_mut","input","inputs","internal","into","into","into","into","into","into","into","into_deserializer","invalid_type","is_array","is_boolean","is_data","is_eof","is_f64","is_i64","is_io","is_null","is_number","is_object","is_string","is_syntax","is_u64","json","json_from_str","kontrol","kpassport","kroute","krypto","line","log","log_file","method","not_allowed","not_found","pointer","pointer_mut","port","pre_condition","provide","provide","read","read_logging","read_port","read_working_dir","secret_key","serialize","serialize","server","source","static_files_path","take","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unauthorized","url_params","url_params","validate","validate","validate","vzip","vzip","vzip","vzip","vzip","vzip","vzip","working_directory","LOG_FILE","WORKING_DIRECTORY","UserInput","is_valid","Log","borrow","borrow_mut","from","into","log","try_from","try_into","type_id","vzip","Email","Generic","Password","Username","Validate","ValidationError","borrow","borrow","borrow_mut","borrow_mut","email","fmt","fmt","from","from","into","into","password","provide","to_string","try_from","try_from","try_into","try_into","type_id","type_id","username","vzip","vzip"],"q":[[0,"kong"],[319,"kong::defaults"],[321,"kong::inputs"],[323,"kong::log"],[333,"kong::validate"]],"d":["Represents a JSON array.","Represents a JSON boolean.","Configuration error","HTTP DELETE method","üè¥ API error response","HTTP GET method","HTTP HEAD method","Invalid HTTP Method","This type represents all possible errors that can occur ‚Ä¶","Represents any valid JSON value.","üö® <code>kong</code> error management","üéõÔ∏è Server configuration","üî• Kong object","üéÆ API Enpoint kontrollers","Log file error","üö• HTTP methods","Represents a JSON null value.","Represents a JSON number, whether integer or floating ‚Ä¶","Represents a JSON object.","HTTP OPTIONS method","HTTP POST method","HTTP PUT method","Represents a JSON string.","URL parsing error","Endpoint address","Admin email address","If the <code>Value</code> is an Array, returns the associated vector. ‚Ä¶","If the <code>Value</code> is an Array, returns the associated mutable ‚Ä¶","If the <code>Value</code> is a Boolean, returns the associated bool. ‚Ä¶","If the <code>Value</code> is a number, represent it as f64 if possible. ‚Ä¶","If the <code>Value</code> is an integer, represent it as i64 if ‚Ä¶","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. ‚Ä¶","If the <code>Value</code> is an Object, returns the associated mutable ‚Ä¶","If the <code>Value</code> is a String, returns the associated str. ‚Ä¶","If the <code>Value</code> is an integer, represent it as u64 if ‚Ä¶","Name of the authorization session cookie id","HTTP Bad request (400)","","","","","","","","","","","","","","","Categorizes the cause of this error.","","","","","One-based column number at which the error was detected.","Kong configuration","HTTP request conflict (409)","Weather the server should log information to console. ‚Ä¶","","","Create new kong instance","","üßÆ <code>kong</code> default, constant values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error message","","","","","","Display a JSON value as a string.","","HTTP forbidden request (402)","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert a <code>Vec</code> to <code>Value</code>","Convert <code>Number</code> to <code>Value</code>","Returns the argument unchanged.","","","Convert map (with string keys) to <code>Value</code>","Convert copy-on-write string to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","","Convert string slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","Convert 32-bit floating point number to <code>Value</code>","","","","","","Convert boolean to <code>Value</code>","Convert a slice to <code>Value</code>","","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","","","Index into a JSON array or map. A string index can be used ‚Ä¶","Get user input","Get user input","Mutably index into a JSON array or map. A string index can ‚Ä¶","Node hostname","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","Write into a <code>serde_json::Value</code> using the syntax ‚Ä¶","Validated user input","‚å®Ô∏è <code>kong</code> user input management","HTTP internal server error (500)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the <code>Value</code> is an Array. Returns false ‚Ä¶","Returns true if the <code>Value</code> is a Boolean. Returns false ‚Ä¶","Returns true if this error was caused by input data that ‚Ä¶","Returns true if this error was caused by prematurely ‚Ä¶","Returns true if the <code>Value</code> is a number that can be ‚Ä¶","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> ‚Ä¶","Returns true if this error was caused by a failure to read ‚Ä¶","Returns true if the <code>Value</code> is a Null. Returns false ‚Ä¶","Returns true if the <code>Value</code> is a Number. Returns false ‚Ä¶","Returns true if the <code>Value</code> is an Object. Returns false ‚Ä¶","Returns true if the <code>Value</code> is a String. Returns false ‚Ä¶","Returns true if this error was caused by input that was not","Returns true if the <code>Value</code> is an integer between zero and ‚Ä¶","Construct a <code>serde_json::Value</code> from a JSON literal.","Deserialize an instance of type <code>T</code> from a string of JSON ‚Ä¶","Handle endpoint (business logic)","Request authentication + authorization token","üåÄ <code>kong</code> request routing","","One-based line number at which the error was detected.","üìá <code>kong</code> node logging","Weather the server should log information to file, the ‚Ä¶","Enpoint method","HTTP method not allowed resource (405)","HTTP not foud resource (404)","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable ‚Ä¶","Port to access the server","HTTP precondition failed (412)","","","Read server config file from path provided as an argument ‚Ä¶","read loggin","read port from config file","Read working directory from config file","Kong secret key","","","","","Path to static files, <strong>if not provided no static files will </strong>‚Ä¶","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its ‚Ä¶","","","","","","","","","","","","","","","","","","","","","","","","","","","","HTTP unauthorized request (401)","url parameters extractor","url parameters extractor","üî¨ <code>kong</code> user input validation","Validate user input","Validate user input","","","","","","","","Kong server working directory, path should end with <code>/</code> ‚Ä¶","Kong log file","Kong working directory","‚å®Ô∏è User input management","Validate user input","üìá Logging management","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Log data","","","","","Email validation error","Generic validation error","Password validation error","Username validation error","üî¨ User input validator","Validation error","","","","","TODO: better email validation","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","TODO: better password validation","","","","","","","","","Validate username (using Twitter style usernames)","",""],"i":[2,2,32,15,0,15,15,32,0,0,0,0,0,0,32,0,2,2,2,15,15,15,2,32,46,20,2,2,2,2,2,2,2,2,2,2,20,49,18,32,49,20,15,13,2,18,32,49,20,15,13,2,13,15,2,15,2,13,18,49,20,13,13,18,2,0,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,49,32,32,15,13,13,2,2,49,18,32,49,20,15,13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,2,46,46,2,20,2,2,18,0,49,18,32,49,20,15,13,2,2,13,2,2,13,13,2,2,13,2,2,2,2,13,2,0,0,46,18,0,0,13,0,20,46,49,49,2,2,20,49,32,13,20,20,20,20,20,49,2,0,13,20,2,15,2,32,15,13,2,18,32,49,20,15,13,2,18,32,49,20,15,13,2,18,32,49,20,15,13,2,49,46,46,0,46,46,18,32,49,20,15,13,2,20,0,0,0,56,0,57,57,57,57,57,57,57,57,57,55,55,55,55,0,0,58,55,58,55,58,55,55,58,55,58,55,58,55,55,58,55,58,55,58,55,58,58,55],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[2,[[5,[[4,[2,3]]]]]],[2,[[5,[[4,[2,3]]]]]],[2,[[5,[6]]]],[2,[[5,[7]]]],[2,[[5,[8]]]],[2,5],[2,[[5,[[9,[1,2]]]]]],[2,[[5,[[9,[1,2]]]]]],[2,[[5,[10]]]],[2,[[5,[11]]]],0,[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,14],[15,15],[2,2],[[]],[[]],[13,16],0,[[],12],0,[17,13],[17,13],[[],18],[[],2],0,[19,[[21,[20]]]],[19,[[21,[2]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,10,[23,[10]],22],[[21,[13]]]],[[2,10,[23,[10]],22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,10,22],[[21,[13]]]],[[2,10,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,10,[23,[10]],22],[[21,[13]]]],[[2,10,[23,[10]],22],[[21,[13]]]],[[2,16,22],[[21,[13]]]],[[2,16,22],[[21,[13]]]],[[2,10,16,22],[[21,[13]]]],[[2,10,16,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,22],[[21,[13]]]],[[2,10,22],[[21,[13]]]],[[2,10,22],[[21,[13]]]],[[15,15],6],[[2,11],6],[[2,8],6],[[2,10],6],[[2,24],6],[[2,11],6],[[2,25],6],[[2,26],6],[[2,27],6],[[2,28],6],[[2,16],6],[[2,26],6],[[2,29],6],[[2,26],6],[[2,11],6],[[2,25],6],[[2,30],6],[[2,29],6],[[2,24],6],[[2,30],6],[[2,16],6],[[2,2],6],[[2,7],6],[[2,16],6],[[2,31],6],[[2,29],6],[[2,7],6],[[2,27],6],[[2,25],6],[[2,10],6],[[2,31],6],[[2,6],6],[[2,24],6],[[2,31],6],[[2,30],6],[[2,6],6],[[2,27],6],[[2,1],6],[[2,8],6],[[2,28],6],[[2,7],6],[[2,6],6],[[2,8],6],[[2,28],6],[[],6],0,[[32,33],34],[[32,33],34],[[15,33],34],[[13,33],[[21,[35]]]],[[13,33],[[21,[35]]]],[[2,33],[[21,[35]]]],[[2,33],[[21,[35]]]],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[31,2],[[[4,[[36,[2]],3]]],2],[37,2],[[]],[29,2],[28,2],[[[9,[1,2]]],2],[[[38,[10]]],2],[1,2],[7,2],[26,2],[10,2],[[],2],[24,2],[27,2],[8,2],[30,2],[[[5,[[36,[2]]]]],2],[25,2],[6,2],[[[23,[[0,[39,[36,[2]]]]]]],2],[11,2],[16,2],[40,2],[40,2],[10,[[21,[15]]]],[10,[[21,[2,13]]]],[[2,41],[[5,[2]]]],[42,[[5,[2]]]],[42,[[5,[2]]]],[[2,41],[[5,[2]]]],0,[[2,41],2],[[2,41],2],0,0,[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[43,44],13],[2,6],[2,6],[13,6],[13,6],[2,6],[2,6],[13,6],[2,6],[2,6],[2,6],[2,6],[13,6],[2,6],0,[10,[[21,[45,13]]]],[18,12],0,[[[4,[[47,[46]]]]],12],0,[13,16],0,0,[[],15],[[],12],[[],12],[[2,10],[[5,[2]]]],[[2,10],[[5,[2]]]],0,[[],12],[48],[48],[[],[[21,[20,32]]]],[[]],[[],25],[[],1],0,[[49,50],21],[[2,50],21],0,[13,[[5,[51]]]],0,[2,2],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],12],[[53,10],[[21,[54,32]]]],[[53,10],[[21,[54,32]]]],0,[[[5,[2]]],[[21,[[5,[2]]]]]],[[[5,[2]]],[[21,[[5,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[21,[55]]]],0,[[]],[[]],[[]],[[]],[10,[[21,[32]]]],[[],21],[[],21],[[],52],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[10,6],[[55,33],34],[[55,33],34],[[]],[[]],[[]],[[]],[10,6],[48],[[],1],[[],21],[[],21],[[],21],[[],21],[[],52],[[],52],[10,6],[[]],[[]]],"c":[],"p":[[3,"String"],[4,"JsonValue"],[3,"Global"],[3,"Vec"],[4,"Option"],[15,"bool"],[15,"f64"],[15,"i64"],[3,"Map"],[15,"str"],[15,"u64"],[3,"Response"],[3,"JsonError"],[4,"Category"],[4,"Method"],[15,"usize"],[8,"Display"],[3,"Kong"],[8,"Deserializer"],[3,"Konfig"],[4,"Result"],[8,"Visitor"],[15,"slice"],[15,"f32"],[15,"u16"],[15,"isize"],[15,"u32"],[15,"i32"],[15,"u8"],[15,"i8"],[15,"i16"],[4,"KError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Into"],[3,"Number"],[4,"Cow"],[8,"Clone"],[8,"IntoIterator"],[8,"Index"],[3,"Request"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"Kontrol"],[3,"Box"],[3,"Demand"],[3,"ErrorResponse"],[8,"Serializer"],[8,"Error"],[3,"TypeId"],[3,"Router"],[3,"Params"],[4,"ValidationError"],[8,"UserInput"],[3,"Log"],[3,"Validate"]]},\
"kong_hello_world_example":{"doc":"","t":"DLMLLLLLFLMLLLL","n":["HelloKontroller","address","address","borrow","borrow_mut","from","into","kontrol","main","method","method","try_from","try_into","type_id","vzip"],"q":[[0,"kong_hello_world_example"]],"d":["Hello API endpoint controller","","Endpoint address","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Endpoint HTTP method","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[0,[1,2],0,[[]],[[]],[[]],[[]],[[1,3],4],[[]],[1,5],0,[[],6],[[],6],[[],7],[[]]],"c":[],"p":[[3,"HelloKontroller"],[3,"String"],[3,"Kong"],[3,"Response"],[4,"Method"],[4,"Result"],[3,"TypeId"]]},\
"kong_js_builder":{"doc":"","t":"DDMLLLLLLLLLLLLLLMFMMLLMLLLLLL","n":["Config","KongJSBuilder","accounts","borrow","borrow","borrow_mut","borrow_mut","build","copy_accountsjs","copy_loginjs","copy_mainjs","copy_propertiesjs","deserialize","from","from","into","into","login","main","out_js_file","properties","read","save_src","src_dir","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"kong_js_builder"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,4,7,4,7,4,7,7,7,7,7,4,7,4,7,4,4,0,4,4,4,7,4,7,4,7,4,7,4],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[1,2],[1,2],[1,2],[1,2],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],0,[[]],0,0,[[],4],[[1,1]],0,[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"c":[],"p":[[15,"str"],[3,"String"],[8,"Deserializer"],[3,"Config"],[4,"Result"],[3,"TypeId"],[3,"KongJSBuilder"]]},\
"kong_kontrollers":{"doc":"","t":"AAAADDMLLLLLMAMMAMMLLMLLLLMMMALLMMMLLMLLLLLLMMLLMDLMLLMLLLLLMLLLLLDLLLLLLLLLLLLALLLLRRRRRDLLLLLLMLLLLMLLLLMLNNNNNNENNLLLLLLLLLLLLDDLMLLLLMLLLALLLLLMLLLLLLLLLLDLLLLLLLLLLMLLLLMLDMMMLMMMLLLLAAMLLLLAMALMMMMLMLLLLMLDLMLLMLLLLLMLLLLLDLLLLLLLLLLLLLRDLLLLLLLLLLLDMMLMMLLLLMLLLLLMMMLMLLLLL","n":["accounts","error","login","properties","Account","PublicAccount","account_type","as_json","borrow","borrow","borrow_mut","borrow_mut","bussiness_name","create","created","current_school_name","database","date_of_birth","description","deserialize","deserialize","email","from","from","from","from","fullname","gender","id_number","inputs","into","into","last_login","mobile_number","password","serialize","serialize","student_number","try_from","try_from","try_into","try_into","type_id","type_id","username","username","vzip","vzip","website","CreateAccountKontroller","address","address","borrow","borrow_mut","database","from","get_input","into","kontrol","method","method","try_from","try_into","type_id","validate","vzip","Database","borrow","borrow_mut","connect","create_account","create_admin_account","from","into","new","private_get_account_by_email","private_get_account_by_username","public_get_account_by_email","public_get_account_by_username","sql","try_from","try_into","type_id","vzip","CREATE_ACCOUNT","CREATE_ACCOUNTS_TABLE","CREATE_ADMIN_ACCOUNT","GET_ACCOUNT_BY_EMAIL","GET_ACCOUNT_BY_USERNAME","AccountCreationInput","as_json","borrow","borrow_mut","clone","clone_into","deserialize","email","from","from_json_str","into","is_valid","password","to_owned","try_from","try_into","type_id","username","vzip","ConfigError","DbConnection","DbField","DbSQL","DbTableCreation","DbTransaction","KontrollerError","PasswordHashing","PasswordVerifyHash","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","vzip","LoginKontroller","LoginResponse","address","address","borrow","borrow","borrow_mut","borrow_mut","database","from","from","get_input","inputs","into","into","is_admin","kontrol","method","method","serialize","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","AccountLoginInput","as_json","borrow","borrow_mut","clone","clone_into","deserialize","from","from_json_str","into","is_valid","password","to_owned","try_from","try_into","type_id","username","vzip","Property","added","address","agentid","as_json","bathrooms","bedrooms","bookmarks","borrow","borrow_mut","clone","clone_into","create","database","description","deserialize","from","from","from_json_str","get","id","inputs","into","likes","name","photos","price","serialize","sqft","to_owned","try_from","try_into","type_id","views","vzip","CreatePropertyKontroller","address","address","borrow","borrow_mut","database","from","get_input","into","kontrol","method","method","try_from","try_into","type_id","validate","vzip","Database","add_property","borrow","borrow_mut","connect","from","get_all_properties","get_property_by_id","into","new","try_from","try_into","type_id","vzip","ADDRESS","GetPropertyKontrolHandler","address","borrow","borrow_mut","from","into","kontrol","method","try_from","try_into","type_id","vzip","CreatePropertyInput","address","agentid","as_json","bathrooms","bedrooms","borrow","borrow_mut","clone","clone_into","description","deserialize","from","from_json_str","into","is_valid","name","photos","price","serialize","sqft","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"kong_kontrollers"],[4,"kong_kontrollers::accounts"],[49,"kong_kontrollers::accounts::create"],[66,"kong_kontrollers::accounts::database"],[84,"kong_kontrollers::accounts::database::sql"],[89,"kong_kontrollers::accounts::inputs"],[108,"kong_kontrollers::error"],[129,"kong_kontrollers::login"],[158,"kong_kontrollers::login::inputs"],[176,"kong_kontrollers::properties"],[211,"kong_kontrollers::properties::create"],[228,"kong_kontrollers::properties::database"],[242,"kong_kontrollers::properties::get"],[255,"kong_kontrollers::properties::inputs"]],"d":["üë• Accounts kontroller","üö® Kontroller Errors","üîì Login kontroller","üè† Properties kontroller","üòÄ A generic user account","ü•∏ Account Public Data","Type of account, eg <code>admin</code>","convert to json value","","","","","Name of the account‚Äôs bussiness","‚ú® Account creation kontroller","Date when account was created","User‚Äôs current school name","üóÑÔ∏è Accounts database management","The date when the account holder was born.","Short bio of Account","","","User‚Äôs email address","Returns the argument unchanged.","","","Returns the argument unchanged.","The fullname of the account holder.","The gender of the account holder","ID number of the account owner","‚å®Ô∏è Account input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Date account last logged in","Account owner‚Äôs mobile number","Account‚Äôs master key","","","User‚Äôs student number","","","","","","","Account‚Äôs unique username","The username of the user, also used as an unique identifier","","","Account owner‚Äôs web-address","‚ú® Accounts creation kontroller","kontroller address","Address to kontroller (url path)","","","SQLite database handle","Returns the argument unchanged.","Get user input from HTTP request","Calls <code>U::from(self)</code>.","Create a new user","Method supported by kontroller","HTTP method supported by the kontroller","","","","Validate user input","","Database management system","","","Open SQLite connection, create tables","Create a new account","Create a new admin account","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new database controller","Get an account‚Äôs private data by its email","Get an account‚Äôs private data by its username","Get an account‚Äôs public data by its email","Get an account‚Äôs public data by its username","SQL statements and queries","","","","","Insert a account in the accounts table","Create user accounts table","Insert a admin account in the accounts table","Get account by email","Get account by username","‚å®Ô∏è Account creation input","new generic resource","","","","","","Account email address","Returns the argument unchanged.","from json","Calls <code>U::from(self)</code>.","","Account master key","","","","","Account‚Äôs username","","Configuration error","Database connection error","Database field refferencing error","Database sql statement error","Database table creation error","Database transaction error","üö® Kontroller Errors","Password hashing error","Password hash verification","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Login accounts API endpoint handler","Login response message","Endpoint‚Äôs address","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get input from request","üîë User inputs for the <code>login</code> <strong>kontroller</strong>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if user is admin","Issue kpassport","Method supported by endpoint","","","","","","","","","Validate request input","","","Account authentication input","new generic resource","","","","","","Returns the argument unchanged.","from json","Calls <code>U::from(self)</code>.","","Account master key","","","","","Account‚Äôs username","","üè† A real estate property.","","","","new generic resource","","","","","","","","‚ú® Property creation kontroller","","","","Returns the argument unchanged.","","from json","Properties API endpoint controller","","‚å®Ô∏è User Input","Calls <code>U::from(self)</code>.","","","Contains a JSON string with paths to the actual images","","","","","","","","","","‚ú® Create property kontroller","Endpoint‚Äôs address","Address to kontroller","","","SQLite database handle","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Add property","Method supported by endpoint","HTTP method supported by the kontroller","","","","Validate user input","","database controller","","","","","Returns the argument unchanged.","Get all properties","","Calls <code>U::from(self)</code>.","","","","","","","Admin add property API endpoint handler","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get property","","","","","","‚å®Ô∏è Property creation input","","","new generic resource","","","","","","","","","Returns the argument unchanged.","from json","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,4,1,4,1,4,1,4,0,4,4,0,4,4,4,1,4,4,4,1,1,4,4,4,0,4,1,4,4,4,4,1,4,4,1,4,1,4,1,4,1,4,1,4,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,16,16,16,16,16,16,16,16,16,16,16,16,0,16,16,16,16,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,17,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,24,24,24,26,24,26,24,24,26,24,0,24,26,24,24,24,24,26,24,26,24,26,24,26,24,24,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,0,0,28,28,28,28,28,0,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,34,34,34,34,34,34,34,34,34,34,34,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[3,[[5,[4]]]],[3,[[5,[1]]]],0,[[]],[6,4],[4,1],[[]],0,0,0,0,[[]],[[]],0,0,0,[[4,7],5],[[1,7],5],0,[[],5],[[],5],[[],5],[[],5],[[],8],[[],8],0,0,[[]],[[]],0,0,[9,10],0,[[]],[[]],0,[[]],[[9,11],[[12,[2]]]],[[]],[[9,13],14],[9,15],0,[[],5],[[],5],[[],8],[[9,[12,[2]]],[[5,[[12,[2]]]]]],[[]],0,[[]],[[]],[16,[[5,[17]]]],[[16,4],[[5,[17]]]],[[16,4],[[5,[17]]]],[[]],[[]],[18,16],[[16,18],[[5,[[12,[4]],17]]]],[[16,18],[[5,[[12,[4]],17]]]],[[16,18],[[5,[[12,[1]],17]]]],[[16,18],[[5,[[12,[1]],17]]]],0,[[],5],[[],5],[[],8],[[]],0,0,0,0,0,0,[6,2],[[]],[[]],[6,6],[[]],[3,[[5,[6]]]],0,[[]],[10,[[5,[6,19]]]],[[]],[6,[[5,[20]]]],0,[[]],[[],5],[[],5],[[],8],0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[17,21],22],[[17,21],22],[[]],[[]],[23],[[],10],[[],5],[[],5],[[],8],[[]],0,0,[24,10],0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[24,11],[[12,[2]]]],0,[[]],[[]],[[24,13],25],[[24,13],14],[24,15],0,[[26,7],5],[[],5],[[],5],[[],5],[[],5],[[],8],[[],8],[[24,[12,[2]]],[[5,[[12,[2]]]]]],[[]],[[]],0,[27,2],[[]],[[]],[27,27],[[]],[3,[[5,[27]]]],[[]],[10,[[5,[27,19]]]],[[]],[27,[[5,[20]]]],0,[[]],[[],5],[[],5],[[],8],0,[[]],0,0,0,0,[28,2],0,0,0,[[]],[[]],[28,28],[[]],0,0,0,[3,[[5,[28]]]],[[]],[29,28],[10,[[5,[28,19]]]],0,0,0,[[]],0,0,0,0,[[28,7],5],0,[[]],[[],5],[[],5],[[],8],0,[[]],0,[30,10],0,[[]],[[]],0,[[]],[[30,11],[[12,[2]]]],[[]],[[30,13],14],[30,15],0,[[],5],[[],5],[[],8],[[30,[12,[2]]],[[5,[[12,[2]]]]]],[[]],0,[[31,28],[[5,[17]]]],[[]],[[]],[31,[[5,[17]]]],[[]],[31,[[5,[[32,[28]],17]]]],[[31,33],[[5,[[12,[28]],17]]]],[[]],[18,31],[[],5],[[],5],[[],8],[[]],0,0,[34,10],[[]],[[]],[[]],[[]],[[34,13],14],[34,15],[[],5],[[],5],[[],8],[[]],0,0,0,[29,2],0,0,[[]],[[]],[29,29],[[]],0,[3,[[5,[29]]]],[[]],[10,[[5,[29,19]]]],[[]],[29,[[5,[20]]]],0,0,0,[[29,7],5],0,[[]],[[],5],[[],5],[[],8],[[]]],"c":[],"p":[[3,"PublicAccount"],[4,"Value"],[8,"Deserializer"],[3,"Account"],[4,"Result"],[3,"AccountCreationInput"],[8,"Serializer"],[3,"TypeId"],[3,"CreateAccountKontroller"],[3,"String"],[3,"Request"],[4,"Option"],[3,"Kong"],[3,"Response"],[4,"Method"],[3,"Database"],[4,"KontrollerError"],[15,"str"],[3,"Error"],[4,"ValidationError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"LoginKontroller"],[15,"bool"],[3,"LoginResponse"],[3,"AccountLoginInput"],[3,"Property"],[3,"CreatePropertyInput"],[3,"CreatePropertyKontroller"],[3,"Database"],[3,"Vec"],[15,"i64"],[3,"GetPropertyKontrolHandler"]]},\
"krypto":{"doc":"üîê krypto","t":"AAAAADLLLLLLLLLLLRRRNNNNNNNENNNNLLLLLLLLLLLDDLLLLLLLLLMLLLLLLLLMLLLLMLMLLLLLLLLMLFF","n":["authentication","defaults","error","kpassport","password","Auth","borrow","borrow_mut","clone","clone_into","from","into","issue_kpassport_cookie","to_owned","try_from","try_into","type_id","HOSTNAME_LENGTH_LIMIT","TIMESTAMP_LENGTH","USERNAME_LENGTH_LIMIT","InvalidKpassport","InvalidKpassportHost","InvalidKpassportSignature","InvalidKpassportTimestamp","InvalidKpassportUsername","KpassportNotSigned","KpassportSize","KryptoError","MissingAuthenticationCredentials","MissingUsernameHostSeperator","PasswordHashing","PasswordVerifyHash","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","Content","Kpassport","as_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","content","eq","eq","export","fmt","fmt","from","from","from_str","host","into","into","new_unsigned","sign","signature","signature_from_bytes","timestamp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","username","validate","hash","verify"],"q":[[0,"krypto"],[5,"krypto::authentication"],[17,"krypto::defaults"],[20,"krypto::error"],[43,"krypto::kpassport"],[81,"krypto::password"]],"d":["üîë Authentication","Default values","Krypto errors","ü™™ Kong Passport","üîè Password management","Kong authentication and authorization management","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Issue a kpassport using HTTP cookies","","","","","The issuer of the <code>kpassport</code> can be a, the maximum length ‚Ä¶","The length of a timestamp created by chrono::Utc::now();","The length of a username A username cannot be longer than ‚Ä¶","Invalid kpassport","Invalid kpassport host","Invalid kpassport signature","Invalid kpassport timestamp","Invalid kpassport username","kpassport has not yet been signed","Invalid kpassport size","Krypto errors","Authentication credentials missing","Kpassport username and host seperator not found","Password hashing error","Password hash verification","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The content of a <code>kpassport</code>","The <code>kpassport</code> authorization token","Convert content to a string of bytes that can be signed ‚Ä¶","","","","","","","","","Kpassport content","","","Export kpassport as url safe base64 String","","","Returns the argument unchanged.","Returns the argument unchanged.","Derive a <code>kpassport</code> from a base64 encoded string","Server or application that generated the kpassport","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generates a new <strong>unsigned</strong> <code>kpassport</code>","Sign the <strong>kpassport</strong>","The signature of the kpassport","Derive signature from bytes","The time when the kpassport was generated","","","","","","","","","The user that is being that is handed the kpassport","Validate the <strong>kpassport</strong> (see if it was signed with the key)","Hash a cleartext password using the scrypt hash function","Check if a scrypt hash matches the password cleartext"],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,10,10,13,10,13,10,13,10,13,13,10,13,13,10,13,10,13,13,10,10,13,13,13,13,13,10,10,13,10,13,10,13,10,13,10,13,0,0],"f":[0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[]],[[]],[[2,2,2,2],[[4,[3]]]],[[]],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[3,6],7],[[3,6],7],[[]],[[]],[8],[[],9],[[],4],[[],4],[[],5],0,0,[10,[[4,[[12,[11]],3]]]],[[]],[[]],[[]],[[]],[10,10],[13,13],[[]],[[]],0,[[10,10],14],[[13,13],14],[13,[[4,[9,3]]]],[[10,6],7],[[13,6],7],[[]],[[]],[2,[[4,[13,3]]]],0,[[]],[[]],[[2,2],[[4,[13,3]]]],[[13,2],[[4,[3]]]],0,[[[12,[11]]],[[4,[15,3]]]],0,[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,[[13,2],[[4,[3]]]],[2,[[4,[9,3]]]],[[2,2],[[4,[14,3]]]]],"c":[],"p":[[3,"Auth"],[15,"str"],[4,"KryptoError"],[4,"Result"],[3,"TypeId"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[3,"Content"],[15,"u8"],[3,"Vec"],[3,"Kpassport"],[15,"bool"],[3,"Hash"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
