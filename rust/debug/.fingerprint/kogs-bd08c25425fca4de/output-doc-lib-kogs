{"message":"missing documentation for the crate","code":{"code":"missing_docs","explanation":null},"level":"warning","spans":[{"file_name":"krates/kogs/src/lib.rs","byte_start":0,"byte_end":9308,"line_start":1,"line_end":258,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"#![doc(html_favicon_url = \"https://kwatafana.org/logo.jpeg\")]","highlight_start":1,"highlight_end":62},{"text":"#![doc(html_logo_url = \"https://kwatafana.org/logo.jpeg\")]","highlight_start":1,"highlight_end":59},{"text":"#![warn(missing_docs, unreachable_pub, future_incompatible, rust_2018_idioms)]","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"use kerror::KError;","highlight_start":1,"highlight_end":20},{"text":"use rusqlite::{params, Connection};","highlight_start":1,"highlight_end":36},{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"mod sql {","highlight_start":1,"highlight_end":10},{"text":"    pub const CREATE_PROPERTIES_TABLE: &str = \"","highlight_start":1,"highlight_end":48},{"text":"      CREATE TABLE IF NOT EXISTS properties (","highlight_start":1,"highlight_end":46},{"text":"        id INTEGER PRIMARY KEY,                       -- The Identifier of the property, the Rust Type is `i64`","highlight_start":1,"highlight_end":112},{"text":"        name TEXT NOT NULL,                           -- Name of the property","highlight_start":1,"highlight_end":78},{"text":"        price FLOAT,                                  -- Price of the property","highlight_start":1,"highlight_end":79},{"text":"        bedrooms INTEGER DEFAULT(0) NOT NULL,         -- Number of bedrooms","highlight_start":1,"highlight_end":76},{"text":"        bathrooms INTEGER DEFAULT(0) NOT NULL,        -- Number of bathrooms","highlight_start":1,"highlight_end":77},{"text":"        sqft FLOAT,                                   -- Square foot area size of the property","highlight_start":1,"highlight_end":95},{"text":"        address TEXT,                                 -- Address of the property","highlight_start":1,"highlight_end":81},{"text":"        agentid INTEGER,                              -- The id of the agent in charge of the property","highlight_start":1,"highlight_end":103},{"text":"        description TEXT,                             -- A description of the property","highlight_start":1,"highlight_end":87},{"text":"        online_views INTEGER DEFAULT(0) NOT NULL,     -- Number of online views the property got","highlight_start":1,"highlight_end":97},{"text":"        physical_views INTEGER DEFAULT(0) NOT NULL,   -- Number of physical irl views the property got","highlight_start":1,"highlight_end":103},{"text":"        likes INTEGER DEFAULT(0) NOT NULL,            -- Number of times the property has been liked","highlight_start":1,"highlight_end":101},{"text":"        bookmarks INTEGER DEFAULT(0) NOT NULL,        -- Number of times the property has been bookmarked","highlight_start":1,"highlight_end":106},{"text":"        photos TEXT,                                  -- Contains a JSON string with paths to the actual images","highlight_start":1,"highlight_end":112},{"text":"        added TEXT DEFAULT(date('now')) NOT NULL)     -- The date when the property was added, the Rust Type is `chrono::DateTime`\";","highlight_start":1,"highlight_end":133},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Add a property","highlight_start":1,"highlight_end":23},{"text":"    pub const ADD_PROPERTY: &str = \"","highlight_start":1,"highlight_end":37},{"text":"      INSERT INTO properties (name,","highlight_start":1,"highlight_end":36},{"text":"        price,","highlight_start":1,"highlight_end":15},{"text":"        bedrooms,","highlight_start":1,"highlight_end":18},{"text":"        bathrooms,","highlight_start":1,"highlight_end":19},{"text":"        sqft,","highlight_start":1,"highlight_end":14},{"text":"        address,","highlight_start":1,"highlight_end":17},{"text":"        agentid,","highlight_start":1,"highlight_end":17},{"text":"        description,","highlight_start":1,"highlight_end":21},{"text":"        online_views,","highlight_start":1,"highlight_end":22},{"text":"        physical_views,","highlight_start":1,"highlight_end":24},{"text":"        likes,","highlight_start":1,"highlight_end":15},{"text":"        bookmarks,","highlight_start":1,"highlight_end":19},{"text":"        photos,","highlight_start":1,"highlight_end":16},{"text":"        added","highlight_start":1,"highlight_end":14},{"text":"       )","highlight_start":1,"highlight_end":9},{"text":"      VALUES (?1,?2,?3,?4,?5,?6,?7,?8,?9,?10,?11,?12,?13,?14)\";","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Get property by id","highlight_start":1,"highlight_end":27},{"text":"    pub const GET_PROPERTY_BY_ID: &str = \"SELECT * FROM properties WHERE id = ?;\";","highlight_start":1,"highlight_end":83},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Data type to represent a physical property such as a house.","highlight_start":1,"highlight_end":64},{"text":"#[derive(Serialize, Deserialize, Clone)]","highlight_start":1,"highlight_end":41},{"text":"pub struct Property {","highlight_start":1,"highlight_end":22},{"text":"    /// Name of the property","highlight_start":1,"highlight_end":29},{"text":"    pub name: String,","highlight_start":1,"highlight_end":22},{"text":"    /// Price of the property","highlight_start":1,"highlight_end":30},{"text":"    pub price: Option<f64>,","highlight_start":1,"highlight_end":28},{"text":"    /// Number of bedrooms","highlight_start":1,"highlight_end":27},{"text":"    pub bedrooms: u16,","highlight_start":1,"highlight_end":23},{"text":"    /// Number of bathrooms","highlight_start":1,"highlight_end":28},{"text":"    pub bathrooms: u16,","highlight_start":1,"highlight_end":24},{"text":"    /// Area size","highlight_start":1,"highlight_end":18},{"text":"    pub sqft: f64,","highlight_start":1,"highlight_end":19},{"text":"    /// Address of property","highlight_start":1,"highlight_end":28},{"text":"    pub address: String,","highlight_start":1,"highlight_end":25},{"text":"    /// ID of Agent representing the property","highlight_start":1,"highlight_end":46},{"text":"    pub agentid: Option<i64>,","highlight_start":1,"highlight_end":30},{"text":"    /// Description of the property","highlight_start":1,"highlight_end":36},{"text":"    pub description: String,","highlight_start":1,"highlight_end":29},{"text":"    /// Number of online views the property got","highlight_start":1,"highlight_end":48},{"text":"    pub online_views: u64,","highlight_start":1,"highlight_end":27},{"text":"    /// Number of physical irl views the property got","highlight_start":1,"highlight_end":54},{"text":"    pub physical_views: u16,","highlight_start":1,"highlight_end":29},{"text":"    /// Number of likes for the property","highlight_start":1,"highlight_end":41},{"text":"    pub likes: u64,","highlight_start":1,"highlight_end":20},{"text":"    /// Number of bookmarks for the property","highlight_start":1,"highlight_end":45},{"text":"    pub bookmarks: u64,","highlight_start":1,"highlight_end":24},{"text":"    /// Contains a JSON string with paths to the actual images","highlight_start":1,"highlight_end":63},{"text":"    pub photos: String,","highlight_start":1,"highlight_end":24},{"text":"    /// Date when the property was added","highlight_start":1,"highlight_end":41},{"text":"    pub added: String,","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Input provided by the user, to create a new property.","highlight_start":1,"highlight_end":58},{"text":"#[derive(Serialize, Deserialize, Clone)]","highlight_start":1,"highlight_end":41},{"text":"pub struct PropertyInput {","highlight_start":1,"highlight_end":27},{"text":"    /// Name of the property","highlight_start":1,"highlight_end":29},{"text":"    pub name: String,","highlight_start":1,"highlight_end":22},{"text":"    /// Price of the property","highlight_start":1,"highlight_end":30},{"text":"    pub price: Option<f64>,","highlight_start":1,"highlight_end":28},{"text":"    /// Number of bedrooms","highlight_start":1,"highlight_end":27},{"text":"    pub bedrooms: u16,","highlight_start":1,"highlight_end":23},{"text":"    /// Number of bathrooms","highlight_start":1,"highlight_end":28},{"text":"    pub bathrooms: u16,","highlight_start":1,"highlight_end":24},{"text":"    /// Area size","highlight_start":1,"highlight_end":18},{"text":"    pub sqft: f64,","highlight_start":1,"highlight_end":19},{"text":"    /// Address of property","highlight_start":1,"highlight_end":28},{"text":"    pub address: String,","highlight_start":1,"highlight_end":25},{"text":"    /// ID of Agent representing the property","highlight_start":1,"highlight_end":46},{"text":"    pub agentid: Option<i64>,","highlight_start":1,"highlight_end":30},{"text":"    /// Description of the property","highlight_start":1,"highlight_end":36},{"text":"    pub description: String,","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"struct PropertiesDB {","highlight_start":1,"highlight_end":22},{"text":"    /// Database file path","highlight_start":1,"highlight_end":27},{"text":"    path: String,","highlight_start":1,"highlight_end":18},{"text":"    /// An SQLite connection handle","highlight_start":1,"highlight_end":36},{"text":"    conn: Option<Connection>,","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl PropertiesDB {","highlight_start":1,"highlight_end":20},{"text":"    pub fn new(path: &str) -> Self {","highlight_start":1,"highlight_end":37},{"text":"        PropertiesDB {","highlight_start":1,"highlight_end":23},{"text":"            path: path.to_string(),","highlight_start":1,"highlight_end":36},{"text":"            conn: None,","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn connect(&mut self) -> Result<(), KError> {","highlight_start":1,"highlight_end":54},{"text":"        // Open database connection","highlight_start":1,"highlight_end":36},{"text":"        let mut conn = Connection::open(self.path.clone()).map_err(|_| KError::DbConnection)?;","highlight_start":1,"highlight_end":95},{"text":"        self.conn = Some(conn);","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Create database tables if they do not already exist","highlight_start":1,"highlight_end":63},{"text":"        match &mut self.conn {","highlight_start":1,"highlight_end":31},{"text":"            Some(conn) => {","highlight_start":1,"highlight_end":28},{"text":"                let tx = conn.transaction().map_err(|_| KError::DbTransaction)?;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tx.execute(sql::CREATE_PROPERTIES_TABLE, ())","highlight_start":1,"highlight_end":61},{"text":"                    .map_err(|_| KError::DbTableCreation)?;","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tx.commit().map_err(|_| KError::DbTableCreation)?;","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            None => Err(KError::DbConnection),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn add_property(&self, property: &Property) -> Result<(), KError> {","highlight_start":1,"highlight_end":76},{"text":"        match &self.conn {","highlight_start":1,"highlight_end":27},{"text":"            Some(conn) => {","highlight_start":1,"highlight_end":28},{"text":"                conn.execute(","highlight_start":1,"highlight_end":30},{"text":"                    sql::ADD_PROPERTY,","highlight_start":1,"highlight_end":39},{"text":"                    params![","highlight_start":1,"highlight_end":29},{"text":"                        &property.name,","highlight_start":1,"highlight_end":40},{"text":"                        &property.price,","highlight_start":1,"highlight_end":41},{"text":"                        &property.bedrooms,","highlight_start":1,"highlight_end":44},{"text":"                        &property.bathrooms,","highlight_start":1,"highlight_end":45},{"text":"                        &property.sqft,","highlight_start":1,"highlight_end":40},{"text":"                        &property.address,","highlight_start":1,"highlight_end":43},{"text":"                        &property.agentid,","highlight_start":1,"highlight_end":43},{"text":"                        &property.description,","highlight_start":1,"highlight_end":47},{"text":"                        &property.online_views,","highlight_start":1,"highlight_end":48},{"text":"                        &property.physical_views,","highlight_start":1,"highlight_end":50},{"text":"                        &property.likes,","highlight_start":1,"highlight_end":41},{"text":"                        &property.bookmarks,","highlight_start":1,"highlight_end":45},{"text":"                        &property.photos,","highlight_start":1,"highlight_end":42},{"text":"                        &property.added","highlight_start":1,"highlight_end":40},{"text":"                    ],","highlight_start":1,"highlight_end":23},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                .map_err(|_| KError::DbField)?;","highlight_start":1,"highlight_end":48},{"text":"                Ok(())","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            None => Err(KError::DbConnection),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn get_property_by_id(&self, id: i64) -> Result<Option<Property>, KError> {","highlight_start":1,"highlight_end":84},{"text":"        match &self.conn {","highlight_start":1,"highlight_end":27},{"text":"            Some(conn) => {","highlight_start":1,"highlight_end":28},{"text":"                let mut stmt = conn","highlight_start":1,"highlight_end":36},{"text":"                    .prepare(sql::GET_PROPERTY_BY_ID)","highlight_start":1,"highlight_end":54},{"text":"                    .map_err(|_| KError::DbSQL)?;","highlight_start":1,"highlight_end":50},{"text":"                let mut properties: Vec<Property> = vec![];","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let property_iter = stmt","highlight_start":1,"highlight_end":41},{"text":"                    .query_map(params![id], |s| {","highlight_start":1,"highlight_end":50},{"text":"                        Ok(Property {","highlight_start":1,"highlight_end":38},{"text":"                            name: s.get(1).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":82},{"text":"                            price: s.get(2).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":83},{"text":"                            bedrooms: s.get(3).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":86},{"text":"                            bathrooms: s.get(4).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":87},{"text":"                            sqft: s.get(5).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":82},{"text":"                            address: s.get(6).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":85},{"text":"                            agentid: s.get(7).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":85},{"text":"                            description: s.get(8).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":89},{"text":"                            online_views: s.get(9).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":90},{"text":"                            physical_views: s.get(10).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":93},{"text":"                            likes: s.get(11).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":84},{"text":"                            bookmarks: s.get(12).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":88},{"text":"                            photos: s.get(13).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":85},{"text":"                            added: s.get(14).map_err(|_| KError::DbField).unwrap(),","highlight_start":1,"highlight_end":84},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                    .unwrap();","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for c in property_iter {","highlight_start":1,"highlight_end":41},{"text":"                    properties.push(c.unwrap());","highlight_start":1,"highlight_end":49},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if properties.is_empty() {","highlight_start":1,"highlight_end":43},{"text":"                    Ok(None)","highlight_start":1,"highlight_end":29},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Ok(Some(properties[0].clone()))","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            None => Err(KError::DbConnection),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod test {","highlight_start":1,"highlight_end":11},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    const TEST_DB_PATH: &str = \"test-data/EUM6O_TEST_DATABASE.sqlite\";","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_store_get_property() {","highlight_start":1,"highlight_end":35},{"text":"        let mut db = PropertiesDB::new(TEST_DB_PATH);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let property = Property {","highlight_start":1,"highlight_end":34},{"text":"            name: \"Luxury Hill\".to_string(),","highlight_start":1,"highlight_end":45},{"text":"            price: None,","highlight_start":1,"highlight_end":25},{"text":"            bedrooms: 1,","highlight_start":1,"highlight_end":25},{"text":"            bathrooms: 1,","highlight_start":1,"highlight_end":26},{"text":"            sqft: 334.44,","highlight_start":1,"highlight_end":26},{"text":"            address: \"Windhoek\".to_string(),","highlight_start":1,"highlight_end":45},{"text":"            agentid: None,","highlight_start":1,"highlight_end":27},{"text":"            description: \"Cool place\".to_string(),","highlight_start":1,"highlight_end":51},{"text":"            online_views: 0,","highlight_start":1,"highlight_end":29},{"text":"            physical_views: 0,","highlight_start":1,"highlight_end":31},{"text":"            likes: 0,","highlight_start":1,"highlight_end":22},{"text":"            bookmarks: 0,","highlight_start":1,"highlight_end":26},{"text":"            photos: \"\".to_string(),","highlight_start":1,"highlight_end":36},{"text":"            added: \"\".to_string(),","highlight_start":1,"highlight_end":35},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        db.connect().unwrap();","highlight_start":1,"highlight_end":31},{"text":"        db.add_property(&property).unwrap();","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let pr = db.get_property_by_id(1).unwrap();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Some(p) = pr {","highlight_start":1,"highlight_end":30},{"text":"            assert_eq!(&p.name, &property.name);","highlight_start":1,"highlight_end":49},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            panic!(\"Could not get property from database\");","highlight_start":1,"highlight_end":60},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn remove_test_db() {","highlight_start":1,"highlight_end":26},{"text":"        let test_db_path = std::path::Path::new(TEST_DB_PATH);","highlight_start":1,"highlight_end":63},{"text":"        if std::path::Path::exists(test_db_path) {","highlight_start":1,"highlight_end":51},{"text":"            std::fs::remove_file(test_db_path).unwrap();","highlight_start":1,"highlight_end":57},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"krates/kogs/src/lib.rs","byte_start":129,"byte_end":141,"line_start":3,"line_end":3,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"#![warn(missing_docs, unreachable_pub, future_incompatible, rust_2018_idioms)]","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: missing documentation for the crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkrates/kogs/src/lib.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![doc(html_favicon_url = \"https://kwatafana.org/logo.jpeg\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![doc(html_logo_url = \"https://kwatafana.org/logo.jpeg\")]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![warn(missing_docs, unreachable_pub, future_incompatible, rust_2018_idio\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkrates/kogs/src/lib.rs:3:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![warn(missing_docs, unreachable_pub, future_incompatible, rust_2018_idioms)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
